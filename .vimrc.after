" ===============
" Color Scheme
" ---------------
" Use the following to default to the light background.
" set background=light
" so ~/.vim/settings/solarized.vim

" ===============
" Global
" ---------------

" Set Vim shell
set shell=/usr/local/bin/zsh\ -l

" Turn off wrapping
set formatoptions-=t

" Mouse selection should ignore line numbers
set mouse=a

" Auto-resize windows as they receive focus.
" set winheight=40
" set winminheight=10
set winwidth=80
set textwidth=80
" Auto wrap comments (only) at textwidth
set formatoptions-=t


" ===============
" Copy/Paste
" ---------------
" Paste from non-volatile register (only things you have yanked; as opposed to
" things you have deleted).
nnoremap <leader>p "0p
vnoremap <leader>p "0p
nnoremap <leader>y "*y
vnoremap <leader>y "*y

" ===============
" Resize Windows
" ---------------

" Resize windows:
" + taller
" = shorter
" - left
" _ right
nnoremap <silent> + <C-w>+
nnoremap <silent> = <C-w>-
nnoremap <silent> - <C-w><
nnoremap <silent> _ <C-w>>


" ===============
" File types
" ---------------
" Set the filetype for env files if not already set
au BufRead,BufNewFile *.env.* setfiletype sh


" ===============
" Gundo
" ---------------
" Use modern Python for Gundo
if has('python3')
  let g:gundo_prefer_python3 = 1
endif


" ===============
" NERDTree
" ---------------
" Automatically open to the current directory
" http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file
" set autochdir
autocmd BufEnter * silent! lcd %:p:h
let NERDTreeChDirMode=2
nnoremap <leader>n :NERDTree .<CR>

" Change the cursor shape to match the edit mode.
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"


" ===============
" EditorConfig
" ---------------
" Ignore Vim Figitive files and files on remote servers
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" For some reason I'm unable to override <leader>gs without using the
" following autocmd
" nnoremap <silent> <leader>gs :Git<CR>
autocmd VimEnter * noremap <leader>gs :Git<CR>

" ===============
" Syntastic
" ---------------
" let g:syntastic_cpp_config_file = '.syntastic_cpp_config'
let g:syntastic_cpp_checkers = []

let g:syntastic_html_tidy_exec = '/usr/local/bin/tidy'

" Set up the arrays to ignore for later
if !exists('g:syntastic_html_tidy_ignore_errors')
  let g:syntastic_html_tidy_ignore_errors = []
endif

" Angular ignores
let g:syntastic_html_tidy_ignore_errors += [
  \ '<ng-',
  \ '<app-'
  \ ]

" Storybook .mdx files
let g:syntastic_mdx_checkers = ['jsl']

" ===============
" Javascript Libraries Syntax
" ---------------
" Define the libraries I use
" let g:used_javascript_libs = 'jquery,react,jasmine,d3'


" ===============
" Fugitive
" ---------------
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gc :Gcommit -v<CR>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gp :Git push<CR>
nnoremap <Leader>gu :Git pull<CR>
nnoremap <Leader>gd :Gvdiff<CR>
nnoremap <Leader>gx :wincmd h<CR>:q<CR>
nnoremap <leader>gi :Git<space>
command! Gcundo :Git reset HEAD~1


" ===============
" CtrlP
" ---------------
" Include dot files in searches
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command =
    \ 'ag %s --files-with-matches -g "" --hidden --ignore {.git,.hg,.svn,node_modules}'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Default to path searches
let g:ctrlp_by_filename = 0


" ===============
" SnipMate
" ---------------
let g:snipMate = { 'snippet_version' : 1 }


" ===============
" Fzf
" ---------------
" " Enable fzf
" set rtp+=/usr/local/opt/fzf
"
" " Function to find files in the closest git project root folder
" function! s:find_git_root()
"   return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
" endfunction
"
" command! ProjectFiles execute 'Files' s:find_git_root()
"
" " We don't want to use Ctrl-p as the mapping because
" " it interferes with YankRing (paste, then hit ctrl-p)
" nnoremap <silent> ,t :ProjectFiles<CR>
"
" " Additional mapping for buffer search
" nnoremap <silent> ,b :Buffer<CR>
"
" " Search Git commits
" " nnoremap <silent> ,c :Commits<CR>
" " Search commits for the file in the current buffer
" nnoremap <silent> ,g :BCommits<CR>
"
" " Search Vim command history
" nnoremap <silent> ,h :History<CR>


" ===============
" Coc
" ---------------
" if filereadable(expand("~/.yadr/vim/after/coc.vim"))
"   source ~/.yadr/vim/after/coc.vim
" endif

" ===============
" Tidy Commands
" ---------------
" Haven't been able to get this working yet
" nnoremap <buffer> <leader>th :exec '!tidy -mi -html -wrap 0 %' shellescape(@%, 1)<cr>

" ===============
" Open Frameworks
" ---------------
" Build and run OpenFrameworks project related to buffer
" autocmd  BufRead,BufNewFile  *.cpp let &makeprg = 'if [ -f Makefile ]; then make Release && make RunRelease; else make Release -C .. && make RunRelease -C ..; fi'
